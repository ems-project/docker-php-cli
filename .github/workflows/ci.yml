name: Continuous Docker Image Build

on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  push:
    branches:
      - '7.4'
    tags:
      - 'v*'
  pull_request:

jobs:

  build-docker-images:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.0.0

      - name: Fill GitHub Environment Variables
        uses: FranzDiebold/github-env-vars-action@v2.3.0

      - name: Setup BATS testing framework
        uses: mig4/setup-bats@v1.2.0
        with:
          bats-version: 1.2.1

      - name: Fill PHP Version Environment Variable
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .build.env

      - name: Prepare Workflow Environment
        id: prep
        run: |
          docker network create docker_default
          docker pull appropriate/curl:latest
          PHPCLI_PRD_IMAGENAME=base-php-cli
          PHPCLI_DEV_IMAGENAME=base-php-cli-dev
          DH_PHPCLI_PRD_IMAGENAME=docker.io/elasticms/${PHPCLI_PRD_IMAGENAME}
          DH_PHPCLI_DEV_IMAGENAME=docker.io/elasticms/${PHPCLI_DEV_IMAGENAME}
          GHCR_PHPCLI_PRD_IMAGENAME=ghcr.io/${{ github.repository_owner }}/${PHPCLI_PRD_IMAGENAME}
          GHCR_PHPCLI_DEV_IMAGENAME=ghcr.io/${{ github.repository_owner }}/${PHPCLI_DEV_IMAGENAME}
          VERSION_MAJOR_MINOR_PATCH=${{ env.PHP_VERSION }}
          VERSION_MAJOR_MINOR=${VERSION_MAJOR_MINOR_PATCH%.*}
          VERSION_MAJOR=${VERSION_MAJOR_MINOR%.*}
          echo ::set-output name=dh_phpcli_prd_image::${DH_PHPCLI_PRD_IMAGENAME}
          echo ::set-output name=dh_phpcli_dev_image::${DH_PHPCLI_DEV_IMAGENAME}
          echo ::set-output name=ghcr_phpcli_prd_image::${GHCR_PHPCLI_PRD_IMAGENAME}
          echo ::set-output name=ghcr_phpcli_dev_image::${GHCR_PHPCLI_DEV_IMAGENAME}
          echo ::set-output name=version_major_minor_patch::${VERSION_MAJOR_MINOR_PATCH}
          echo ::set-output name=version_major_minor::${VERSION_MAJOR_MINOR}
          echo ::set-output name=version_major::${VERSION_MAJOR}
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Fill GHCR Docker Prod PHP-CLI Image metadata
        id: meta_ghcr_phpcli_prd
        uses: crazy-max/ghaction-docker-meta@v3
        with:
          images: "${{ steps.prep.outputs.ghcr_phpcli_prd_image }}"
          tags: |
            type=edge
            type=raw,value=${{ env.CI_SHA_SHORT }}
            type=raw,value=${{ steps.prep.outputs.version_major_minor_patch }}
            type=raw,value=${{ steps.prep.outputs.version_major_minor }}
            type=raw,value=${{ steps.prep.outputs.version_major }}
            type=raw,value=latest

      - name: Fill GHCR Docker Dev PHP-CLI Image metadata
        id: meta_ghcr_phpcli_dev
        uses: crazy-max/ghaction-docker-meta@v3
        with:
          images: "${{ steps.prep.outputs.ghcr_phpcli_dev_image }}"
          tags: |
            type=edge
            type=raw,value=${{ env.CI_SHA_SHORT }}
            type=raw,value=${{ steps.prep.outputs.version_major_minor_patch }}
            type=raw,value=${{ steps.prep.outputs.version_major_minor }}
            type=raw,value=${{ steps.prep.outputs.version_major }}
            type=raw,value=latest

      - name: Fill DockerHub Docker PHP-CLI Prod Image metadata
        id: meta_dh_phpcli_prd
        uses: crazy-max/ghaction-docker-meta@v3
        with:
          images: "${{ steps.prep.outputs.dh_phpcli_prd_image }}"
          tags: |
            type=raw,value=${{ steps.prep.outputs.version_major_minor_patch }}
            type=raw,value=${{ steps.prep.outputs.version_major_minor }}
            type=raw,value=${{ steps.prep.outputs.version_major }}
            type=raw,value=latest

      - name: Fill DockerHub Docker PHP-CLI Dev Image metadata
        id: meta_dh_phpcli_dev
        uses: crazy-max/ghaction-docker-meta@v3
        with:
          images: "${{ steps.prep.outputs.dh_phpcli_dev_image }}"
          tags: |
            type=raw,value=${{ steps.prep.outputs.version_major_minor_patch }}
            type=raw,value=${{ steps.prep.outputs.version_major_minor }}
            type=raw,value=${{ steps.prep.outputs.version_major }}
            type=raw,value=latest

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1.10.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Cache Docker layers
        uses: actions/cache@v2.1.7
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build GHCR Docker PHP-CLI Prod Image
        id: build_ghcr_phpcli_prod
        uses: docker/build-push-action@v2.7.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          target: php-cli-prod
          build-args: |
            VERSION_ARG=${{ env.PHP_VERSION }}
            RELEASE_ARG=${{ env.CI_RUN_ID }}
            VCS_REF_ARG=${{ env.CI_SHA }}
            BUILD_DATE_ARG=${{ steps.prep.outputs.build_date }}
          push: false
          load: true
          tags: ${{ steps.meta_ghcr_phpcli_prd.outputs.tags }}
          labels: ${{ steps.meta_ghcr_phpcli_prd.outputs.labels }}

      - name: Build GHCR Docker PHP-CLI Dev Image
        id: build_ghcr_phpcli_dev
        uses: docker/build-push-action@v2.7.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          target: php-cli-dev
          build-args: |
            VERSION_ARG=${{ env.PHP_VERSION }}
            RELEASE_ARG=${{ env.CI_RUN_ID }}
            VCS_REF_ARG=${{ env.CI_SHA }}
            BUILD_DATE_ARG=${{ steps.prep.outputs.build_date }}
          push: false
          load: true
          tags: ${{ steps.meta_ghcr_phpcli_dev.outputs.tags }}
          labels: ${{ steps.meta_ghcr_phpcli_dev.outputs.labels }}

      - name: Scan GHCR PHP-CLI Prod Docker Image
        uses: azure/container-scan@v0
        with:
          image-name: "${{ steps.prep.outputs.ghcr_phpcli_prd_image }}:${{ env.CI_SHA_SHORT }}"

      - name: Scan GHCR PHP-CLI Dev Docker Image
        uses: azure/container-scan@v0
        with:
          image-name: "${{ steps.prep.outputs.ghcr_phpcli_dev_image }}:${{ env.CI_SHA_SHORT }}"

      - name: Test PHP-CLI Prod Docker Image
        env:
          PHP_DOCKER_IMAGE_NAME: ${{ steps.prep.outputs.ghcr_phpcli_prd_image }}:${{ env.CI_SHA_SHORT }}
        run: |
          bats -r test/tests.bats

      - name: Push GHCR PHP-CLI Prod Docker Image
        id: push_ghcr_phpcli_prod
        uses: docker/build-push-action@v2.7.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          target: php-cli-prod
          build-args: |
            VERSION_ARG=${{ env.PHP_VERSION }}
            RELEASE_ARG=${{ env.CI_RUN_ID }}
            VCS_REF_ARG=${{ env.CI_SHA }}
            BUILD_DATE_ARG=${{ steps.prep.outputs.build_date }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_ghcr_phpcli_prd.outputs.tags }}
          labels: ${{ steps.meta_ghcr_phpcli_prd.outputs.labels }}

      - name: Push GHCR PHP-CLI Dev Docker Image
        id: push_ghcr_phpcli_dev
        uses: docker/build-push-action@v2.7.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          target: php-cli-dev
          build-args: |
            VERSION_ARG=${{ env.PHP_VERSION }}
            RELEASE_ARG=${{ env.CI_RUN_ID }}
            VCS_REF_ARG=${{ env.CI_SHA }}
            BUILD_DATE_ARG=${{ steps.prep.outputs.build_date }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_ghcr_phpcli_dev.outputs.tags }}
          labels: ${{ steps.meta_ghcr_phpcli_dev.outputs.labels }}

      - name: Check GHCR PHP-CLI Prod Docker Image
        if: github.event_name != 'pull_request'
        run: |
          docker buildx imagetools inspect ${{ steps.prep.outputs.ghcr_phpcli_prd_image }}:${{ steps.meta_ghcr_phpcli_prd.outputs.version }}
          docker buildx imagetools inspect ${{ steps.prep.outputs.ghcr_phpcli_dev_image }}:${{ steps.meta_ghcr_phpcli_dev.outputs.version }}

      - name: Push DockerHub PHP-CLI Docker Prod Image
        id: push_dh_phpcli_prod
        uses: docker/build-push-action@v2.7.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          target: php-cli-prod
          build-args: |
            VERSION_ARG=${{ env.PHP_VERSION }}
            RELEASE_ARG=${{ env.CI_RUN_ID }}
            VCS_REF_ARG=${{ env.CI_SHA }}
            BUILD_DATE_ARG=${{ steps.prep.outputs.build_date }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_dh_phpcli_prd.outputs.tags }}
          labels: ${{ steps.meta_dh_phpcli_prd.outputs.labels }}

      - name: Push DockerHub PHP-CLI Docker Dev Image
        id: push_dh_phpcli_dev
        uses: docker/build-push-action@v2.7.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          target: php-cli-dev
          build-args: |
            VERSION_ARG=${{ env.PHP_VERSION }}
            RELEASE_ARG=${{ env.CI_RUN_ID }}
            VCS_REF_ARG=${{ env.CI_SHA }}
            BUILD_DATE_ARG=${{ steps.prep.outputs.build_date }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_dh_phpcli_dev.outputs.tags }}
          labels: ${{ steps.meta_dh_phpcli_dev.outputs.labels }}

      - name: Check DockerHub PHP-CLI Prod Docker Image
        if: github.event_name != 'pull_request'
        run: |
          docker buildx imagetools inspect ${{ steps.prep.outputs.dh_phpcli_prd_image }}:${{ steps.meta_dh_phpcli_prd.outputs.version }}
          docker pull ${{ steps.prep.outputs.dh_phpcli_prd_image }}:${{ steps.prep.outputs.version_major_minor_patch }}

      - name: Check DockerHub PHP-CLI Dev Docker Image
        if: github.event_name != 'pull_request'
        run: |
          docker buildx imagetools inspect ${{ steps.prep.outputs.dh_phpcli_dev_image }}:${{ steps.meta_dh_phpcli_dev.outputs.version }}
          docker pull ${{ steps.prep.outputs.dh_phpcli_dev_image }}:${{ steps.prep.outputs.version_major_minor_patch }}

      - name: Create the Mattermost Message
        if: github.event_name != 'pull_request'
        run: |
          echo "{\"text\":\"" > mattermost.json
          echo "# :php: New version of [Base PHP (CLI Only)](https://github.com/ems-project/docker-php-cli) Docker image(s) has been pushed in DockerHub Registry" >> mattermost.json
          echo "| :docker: Docker image Name(s) | Flavor(s) |" >> mattermost.json
          echo "| :--- | :--- |" >> mattermost.json
          echo "| ${{ steps.prep.outputs.dh_phpcli_prd_image }}:${{ steps.prep.outputs.version_major_minor_patch }} | PHP CLI Only |" >> mattermost.json
          echo "| ${{ steps.prep.outputs.dh_phpcli_prd_image }}:${{ steps.prep.outputs.version_major_minor }} | PHP CLI Only |" >> mattermost.json
          echo "| ${{ steps.prep.outputs.dh_phpcli_prd_image }}:${{ steps.prep.outputs.version_major }} | PHP CLI  Only |" >> mattermost.json
          echo "| ${{ steps.prep.outputs.dh_phpcli_prd_image }}:latest | PHP CLI Only |" >> mattermost.json
          echo "| ${{ steps.prep.outputs.dh_phpcli_dev_image }}:${{ steps.prep.outputs.version_major_minor_patch }} | PHP CLI + Composer + XDebug + NPM |" >> mattermost.json
          echo "| ${{ steps.prep.outputs.dh_phpcli_dev_image }}:${{ steps.prep.outputs.version_major_minor }} | PHP CLI + Composer + XDebug + NPM |" >> mattermost.json
          echo "| ${{ steps.prep.outputs.dh_phpcli_dev_image }}:${{ steps.prep.outputs.version_major }} | PHP CLI  + Composer + XDebug + NPM |" >> mattermost.json
          echo "| ${{ steps.prep.outputs.dh_phpcli_dev_image }}:latest | PHP CLI + Composer + XDebug + NPM |" >> mattermost.json
          echo "\"}" >> mattermost.json
          cat mattermost.json

      - name: Send Mattermost Message
        uses: mattermost/action-mattermost-notify@master
        if: github.event_name != 'pull_request'
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
